<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication applicationComplete="appComplete()" close="cleanUp()" invoke="getCommandLineArgs(event)"  xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="800" height="500">
	<mx:Script>
		<![CDATA[
			import com.yellowbadger.profiler.CommandLineArgs;
			import com.yellowbadger.profiler.ProtocolConstants;
			import com.yellowbadger.profiler.analysis.MemoryAnalyzer;
			import com.yellowbadger.profiler.analysis.PerformanceAnalyzer;
			import com.yellowbadger.profiler.model.ProcessedSampleStore;
			import com.yellowbadger.profiler.server.impl.ProfilerSettings;
			import com.yellowbadger.profiler.server.impl.ServerConnection;
			import com.yellowbadger.profiler.util.MMCfgUtil;
			
			import flash.sampler.Sample;
			
			import mx.collections.ArrayCollection;
			
			
			public var serverPort:uint = 9998;
			
			[Bindable]
			private var connection:ServerConnection;
			
			private var store:ProcessedSampleStore;
			
			private var perfAnalyzer:PerformanceAnalyzer = new PerformanceAnalyzer();
			
			private var memoryAnalyzer:MemoryAnalyzer = new MemoryAnalyzer();
			
			private var settings:ProfilerSettings;
			
			private function getCommandLineArgs(event:InvokeEvent):void {
				CommandLineArgs.apply(event.arguments);
			}
			
			private function cleanUp(event:*=null):void {
				MMCfgUtil.clearPreloaderConfig(CommandLineArgs.preloaderPath);
			}
			
			private function appComplete():void {
				settings = new ProfilerSettings();
				settings.autoStart = autoStart.selected;
				connection = new ServerConnection(serverPort,this.log,settings,store);
				store = new ProcessedSampleStore();
				this.nativeApplication.addEventListener(Event.EXITING,cleanUp);
			}
			
			private function log( text:String ):void
			{
				logField.text = text + "\n" + logField.text;
			}
			
			
			[Bindable]
			private var rawString:String;
			
			
			private function findObjects():void {
				connection.findLoiteringObjects();
			}
			
			private function autoStartChanged():void {
				settings.autoStart = autoStart.selected;
			}
			
		]]>
	</mx:Script>
	<mx:HBox id="toolBar">
		<mx:Button label="Listen" toolTip="Open socket to listen for profiled apps." click="connection.listen()" enabled="{!connection.listening}" />
		<mx:Button label="Reset" toolTip="Reset the socket and clear mm.cfg." click="connection.close()" enabled="{connection.listening}" />
		<mx:Button label="Start" toolTip="Start collecting profiling data from the current app." click="connection.startProfiling()" enabled="{!connection.profiling &amp;&amp; connection.connected}" />
		<mx:Button label="Pause" toolTip="Pause collecting profiling data from the current app." click="connection.pauseProfiling()" enabled="{connection.profiling &amp;&amp; connection.connected}" />
		<mx:Button label="Clear" toolTip="Clear profiling data for the current app." click="connection.clearProfilingData()" enabled="{connection.connected}" />
		<mx:Button label="Loitering objects" toolTip="See if any of your filtered objects are still loitering around." click="findObjects()" enabled="{connection.connected}" />
		<mx:CheckBox label="Autostart" id="autoStart" toolTip="Start profiling as soon as a client connects" change="autoStartChanged()" />
		<mx:TextInput id="watchClass" text="::SomeLeakyClassName" /> 
		<mx:Button label="watch" click="connection.watchClass(watchClass.text)" enabled="{watchClass.text.length != 0}" />
	</mx:HBox>
	<mx:TextArea left="0" right="0" top="{toolBar.height}" bottom="0" id="logField" wordWrap="false" />
</mx:WindowedApplication>
